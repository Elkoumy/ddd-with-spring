@startuml
boundary ScoringApplicationService as "Scoring\nApplicaation\nService" order 1
participant ScoringDomainService as "Scoring\nDomain\nService" order 2
participant MonthlyHouseholdBalanceCluster as "Monthly\nHousehold\nBalance\nCluster" order 3
participant RealEstateFinancingCluster as "Real\nEstate\nFinancing\nCluster" order 4
participant AgencyResultCluster as "Agency\nResult\nCluster" order 5
participant ApplicantCluster as "Applicant\nCluster" order 6
participant ScoringResult as "Scoring\nResult" order 7
participant ScoringResultRepository as "Scoring\nResult\nRepository" order 8

ScoringApplicationService -> ScoringDomainService: performScoring(applicantClusterAggregate,\n\t\t\t\tagencyResultClusterAggregate,\n\t\t\t\tmonthlyHouseholdBalanceAggregate,\n\t\t\t\trealEstateFinancingClusterAggregate)

group Score MonthlyHouseholdBalanceCluster
ScoringDomainService -> MonthlyHouseholdBalanceCluster: calculateClusterResult()
MonthlyHouseholdBalanceCluster --> ScoringDomainService: ClusterResult
ScoringDomainService -> ScoringResult: addMonthlyHouseholdBalanceResult(clusterResult)
end

group Score RealEstateFinancingCluster
ScoringDomainService -> RealEstateFinancingCluster: calculateClusterResult()
RealEstateFinancingCluster --> ScoringDomainService: ClusterResult
ScoringDomainService -> ScoringResult: addRealEstateFinancingResult(clusterResult)
end

group Score AgencyResultCluster
ScoringDomainService -> AgencyResultCluster: calculateClusterResult()
AgencyResultCluster --> ScoringDomainService: ClusterResult
ScoringDomainService -> ScoringResult: addAgencyResult(clusterResult)
end

group Score ApplicantCluster
ScoringDomainService -> ApplicantCluster: calculateClusterResult()
ApplicantCluster --> ScoringDomainService: ClusterResult
ScoringDomainService -> ScoringResult: addApplicantResult(clusterResult)
end

group Calculate and save the ScoringResult
ScoringDomainService -> ScoringResult: determineScoringResult()
ScoringResult --> ScoringDomainService: ScoringColor
ScoringDomainService -> ScoringResultRepository: save(scoringResult)
end

ScoringDomainService --> ScoringApplicationService: ScoringColor
@enduml